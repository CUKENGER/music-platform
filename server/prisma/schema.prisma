generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id              Int              @id @default(autoincrement())
  name            String
  artistId        Int
  genre           String
  description     String
  picture         String
  createdAt       DateTime         @default(now())
  listens         Int              @default(0)
  likes           Int              @default(0)
  releaseDate     String
  duration        String           @default("0:00")
  type            AlbumType        @default(ALBUM)
  artist          Artist           @relation(fields: [artistId], references: [id])
  comments        Comment[]        @relation("AlbumComments")
  featuredArtists FeaturedArtist[] @relation("FeaturedArtistToAlbum")
  tracks          Track[]
  likedByUsers    User[]           @relation("LikedAlbums")
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  email           String          @unique
  isActivated     Boolean         @default(false)
  password        String
  activationLink  String
  activationExpiresAt DateTime?
  banned          Boolean         @default(false)
  banReason       String?
  listenedTracks  ListenedTrack[]
  playlists       Playlist[]
  likedPlaylists  PlaylistLike[]
  sharedPlaylists PlaylistShare[]
  tokens          Token[]
  roles           UserRole[]
  likedAlbums     Album[]         @relation("LikedAlbums")
  likedArtists    Artist[]        @relation("LikedArtists")
  likedComments   Comment[]       @relation("LikedComments")
  likedTracks     Track[]         @relation("LikedTracks")
}

model Artist {
  id             Int              @id @default(autoincrement())
  name           String
  genre          String
  description    String
  createdAt      DateTime         @default(now())
  listens        Int              @default(0)
  likes          Int              @default(0)
  picture        String?
  albums         Album[]
  comments       Comment[]        @relation("ArtistComments")
  featuredTracks FeaturedArtist[] @relation("FeaturedArtistToArtist")
  tracks         Track[]
  likedByUsers   User[]           @relation("LikedArtists")
}

model FeaturedArtist {
  id       Int    @id @default(autoincrement())
  artistId Int
  trackId  Int?
  albumId  Int?
  album    Album? @relation("FeaturedArtistToAlbum", fields: [albumId], references: [id], map: "FK_FeaturedArtist_Album")
  artist   Artist @relation("FeaturedArtistToArtist", fields: [artistId], references: [id], map: "FK_FeaturedArtist_ArtistForAlbums")
  track    Track? @relation("FeaturedArtistToTrack", fields: [trackId], references: [id], map: "FK_FeaturedArtist_Track")

  @@unique([artistId, albumId])
  @@unique([artistId, trackId])
}

model Comment {
  id           Int       @id @default(autoincrement())
  username     String
  text         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  likes        Int       @default(0)
  parentId     Int?
  trackId      Int?
  artistId     Int?
  albumId      Int?
  album        Album?    @relation("AlbumComments", fields: [albumId], references: [id])
  artist       Artist?   @relation("ArtistComments", fields: [artistId], references: [id])
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[] @relation("CommentReplies")
  track        Track?    @relation("TrackComments", fields: [trackId], references: [id])
  likedByUsers User[]    @relation("LikedComments")
}

model ListenedTrack {
  id         Int      @id @default(autoincrement())
  userId     Int
  trackId    Int
  listenedAt DateTime @default(now())
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, trackId])
}

model Playlist {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  picture     String?
  isPrivate   Boolean         @default(false)
  listens     Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     Int
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  likes       PlaylistLike[]
  sharedWith  PlaylistShare[]
  tracks      PlaylistTrack[]
}

model PlaylistLike {
  id         Int      @id @default(autoincrement())
  playlistId Int
  userId     Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playlistId, userId])
}

model PlaylistShare {
  id         Int      @id @default(autoincrement())
  playlistId Int
  userId     Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playlistId, userId])
}

model PlaylistTrack {
  id         Int      @id @default(autoincrement())
  playlistId Int
  trackId    Int
  order      Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@index([playlistId, order])
}

model Role {
  id          Int        @id @default(autoincrement())
  value       String     @unique
  description String
  userRoles   UserRole[]
}

model Token {
  id           Int    @id @default(autoincrement())
  refreshToken String @unique
  accessToken  String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
}

model Track {
  id              Int              @id @default(autoincrement())
  name            String
  listens         Int              @default(0)
  likes           Int              @default(0)
  genre           String
  duration        String
  picture         String
  audio           String
  text            String
  artistId        Int?
  albumId         Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  comments        Comment[]        @relation("TrackComments")
  featuredArtists FeaturedArtist[] @relation("FeaturedArtistToTrack")
  listenedByUsers ListenedTrack[]
  playlistTracks  PlaylistTrack[]
  album           Album?           @relation(fields: [albumId], references: [id])
  artist          Artist?          @relation(fields: [artistId], references: [id])
  likedByUsers    User[]           @relation("LikedTracks")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  roleId Int
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([roleId, userId])
}

enum AlbumType {
  ALBUM
  SINGLE
  COLLECTION
}
