datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Модель User
model User {
  id              Int       @id @default(autoincrement()) 
  username        String    @unique
  email           String    @unique
  isActivated     Boolean   @default(false)
  password        String
  activationLink  String
  banned          Boolean   @default(false)
  banReason       String?

  roles           UserRole[] // Связь Many-to-Many через промежуточную модель
  tokens          Token[]
}

// Модель Role
model Role {
  id              Int       @id @default(autoincrement())
  value           String    @unique
  description     String
  userRoles       UserRole[] // Связь Many-to-Many через промежуточную модель
}

// Промежуточная модель для связи Many-to-Many
model UserRole {
  id     Int     @id @default(autoincrement())
  roleId Int
  userId Int

  role   Role    @relation(fields: [roleId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@unique([roleId, userId])
}

// Модель Token
model Token {
  id              Int       @id @default(autoincrement())
  refreshToken    String    @unique
  accessToken     String
  userId          Int

  user            User      @relation(fields: [userId], references: [id])
}

model Track {
  id         Int         @id @default(autoincrement())
  name       String
  artist     String
  listens    Int         @default(0)
  likes      Int         @default(0)
  genre      String
  duration   String
  picture    String
  audio      String
  text       String
  artistId   Int?
  albumId    Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  artistEntity Artist?   @relation(fields: [artistId], references: [id])
  comments     Comment[] @relation("TrackComments") // Обратное отношение
  album        Album?    @relation(fields: [albumId], references: [id])
}

model Artist {
  id          Int          @id @default(autoincrement())
  name        String
  genre       String
  description String
  createdAt   DateTime     @default(now())
  listens     Int          @default(0)
  likes       Int          @default(0)
  picture     String?       

  // Связи с треками и альбомами
  tracks      Track[]
  albums      Album[]      // Массив альбомов, связанный с Artist
  comments    Comment[]    @relation("ArtistComments") // Связь с комментариями
}

model Album {
  id        Int       @id @default(autoincrement())
  name      String
  artistId  Int
  genre     String
  picture   String
  createdAt DateTime  @default(now())
  listens   Int       @default(0)
  likes     Int       @default(0)

  artist    Artist    @relation(fields: [artistId], references: [id])
  tracks    Track[]
  comments  Comment[] @relation("AlbumComments")
}

model Comment {
  id          Int        @id @default(autoincrement())
  username    String
  text        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       Int        @default(0)

  // Поле для связи с родительским комментарием (если есть)
  parentId    Int?
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Поля для связи с другими сущностями
  trackId     Int?
  artistId    Int?
  albumId     Int?

  // Связи с другими сущностями
  track       Track?     @relation("TrackComments", fields: [trackId], references: [id])
  artist      Artist?    @relation("ArtistComments", fields: [artistId], references: [id])
  album       Album?     @relation("AlbumComments", fields: [albumId], references: [id])

  // Ответы на комментарий
  replies     Comment[]  @relation("CommentReplies")
}
