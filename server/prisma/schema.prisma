datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// Модель User
model User {
  id              Int       @id @default(autoincrement()) 
  username        String    @unique
  email           String    @unique
  isActivated     Boolean   @default(false)
  password        String
  activationLink  String
  banned          Boolean   @default(false)
  banReason       String?

  roles           UserRole[]   // Связь Many-to-Many через промежуточную модель
  tokens          Token[]
  
  likedTracks     Track[]     @relation("LikedTracks")
  likedAlbums     Album[]     @relation("LikedAlbums")
  likedArtists    Artist[]    @relation("LikedArtists")
  
  likedComments   Comment[]   @relation("LikedComments")

  listenedTracks  ListenedTrack[]
}

// Модель Track
model Track {
  id         Int         @id @default(autoincrement())
  name       String
  listens    Int         @default(0)
  likes      Int         @default(0)
  genre      String
  duration   String
  picture    String
  audio      String
  text       String
  artistId   Int?
  albumId    Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  artist     Artist?     @relation(fields: [artistId], references: [id])
  album      Album?      @relation(fields: [albumId], references: [id])
  
  likedByUsers User[]     @relation("LikedTracks")
  listenedByUsers ListenedTrack[]

  comments   Comment[]   @relation("TrackComments")
}

// Модель Album
model Album {
  id        Int       @id @default(autoincrement())
  name      String
  artistId  Int
  genre     String
  description String
  picture   String
  createdAt DateTime  @default(now())
  listens   Int       @default(0)
  likes     Int       @default(0)
  releaseDate String
  duration  String    @default("0:00")

  artist    Artist    @relation(fields: [artistId], references: [id])
  tracks    Track[]
  
  likedByUsers User[]     @relation("LikedAlbums")

  comments  Comment[] @relation("AlbumComments")
}

// Модель Artist
model Artist {
  id          Int          @id @default(autoincrement())
  name        String
  genre       String
  description String
  createdAt   DateTime     @default(now())
  listens     Int          @default(0)
  likes       Int          @default(0)
  picture     String?       

  tracks      Track[]
  albums      Album[]
  
  likedByUsers User[]     @relation("LikedArtists")

  comments    Comment[]    @relation("ArtistComments")
}

// Промежуточная модель для связи Many-to-Many для последних прослушанных треков
model ListenedTrack {
  id        Int      @id @default(autoincrement())
  userId    Int
  trackId   Int
  listenedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  track     Track    @relation(fields: [trackId], references: [id])

  @@index([userId, trackId])
}

// Остальные модели (UserRole, Role, Token, Comment) остаются без изменений

// Модель Role
model Role {
  id              Int       @id @default(autoincrement())
  value           String    @unique
  description     String
  userRoles       UserRole[] // Связь Many-to-Many через промежуточную модель
}

// Промежуточная модель для связи Many-to-Many
model UserRole {
  id     Int     @id @default(autoincrement())
  roleId Int
  userId Int

  role   Role    @relation(fields: [roleId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@unique([roleId, userId])
}

// Модель Token
model Token {
  id              Int       @id @default(autoincrement())
  refreshToken    String    @unique
  accessToken     String
  userId          Int

  user            User      @relation(fields: [userId], references: [id])
}

// Модель Comment
model Comment {
  id          Int        @id @default(autoincrement())
  username    String
  text        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       Int        @default(0)

  parentId    Int?
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  trackId     Int?
  artistId    Int?
  albumId     Int?

  track       Track?     @relation("TrackComments", fields: [trackId], references: [id])
  artist      Artist?    @relation("ArtistComments", fields: [artistId], references: [id])
  album       Album?     @relation("AlbumComments", fields: [albumId], references: [id])

  replies     Comment[]  @relation("CommentReplies")

  likedByUsers User[]     @relation("LikedComments")
}
