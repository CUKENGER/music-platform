services:
  client:
    build:
      context: ../client
      dockerfile: ../dev-config/Dockerfile.client
    container_name: mp-client
    ports:
      - "5173:5173"
    environment:
      - API_URL=${API_URL}
    volumes:
      - ../client:/usr/app
      - /usr/app/node_modules
    networks:
      - mp-network
    depends_on:
      - server
  server:
    build:
      context: ../server
      dockerfile: ../dev-config/Dockerfile.server
    container_name: mp-server
    ports:
      - "5000:${SERVER_PORT}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_ACCESS_SECRET_KEY=${JWT_ACCESS_SECRET_KEY}
      - JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY}
      - LYRICS_API_KEY=${LYRICS_API_KEY}
      - LYRICS_API_URL=${LYRICS_API_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - API_URL=${API_URL}
    volumes:
      - ../server:/usr/app
      - /usr/app/node_modules
    networks:
      - mp-network
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:14.1-alpine
    container_name: mp-db
    hostname: "mp-db"
    # restart: always
    ports:
      - "5433:${DATABASE_PORT}"
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - mp-network

networks:
  mp-network:
volumes:
  db:
